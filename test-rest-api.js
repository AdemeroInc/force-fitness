const { SecretManagerServiceClient } = require('@google-cloud/secret-manager');
const fetch = require('node-fetch');
const fs = require('fs');

async function getSecret(secretName) {
  const secretClient = new SecretManagerServiceClient();
  const projectId = 'force-fitness-1753281211';
  
  const [version] = await secretClient.accessSecretVersion({
    name: `projects/${projectId}/secrets/${secretName}/versions/latest`,
  });
  
  return version.payload?.data?.toString();
}

async function getAccessToken() {
  const serviceKey = await getSecret('vertex-ai-service-key');
  const credentials = JSON.parse(serviceKey);
  
  // Create JWT for service account authentication
  const jwt = require('jsonwebtoken');
  
  const now = Math.floor(Date.now() / 1000);
  const payload = {
    iss: credentials.client_email,
    scope: 'https://www.googleapis.com/auth/cloud-platform',
    aud: 'https://oauth2.googleapis.com/token',
    iat: now,
    exp: now + 3600
  };
  
  const token = jwt.sign(payload, credentials.private_key, { algorithm: 'RS256' });
  
  // Exchange JWT for access token
  const response = await fetch('https://oauth2.googleapis.com/token', {
    method: 'POST',
    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
    body: `grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer&assertion=${token}`
  });
  
  const data = await response.json();
  return data.access_token;
}

async function testRestAPI() {
  try {
    console.log('üîë Getting access token...');
    const accessToken = await getAccessToken();
    console.log('‚úÖ Access token obtained');
    
    const projectId = 'force-fitness-1753281211';
    const location = 'us-central1';
    
    // Try the Vertex AI REST API directly
    console.log('üé® Attempting image generation via REST API...');
    
    const url = `https://${location}-aiplatform.googleapis.com/v1/projects/${projectId}/locations/${location}/publishers/google/models/imagen-3.0-fast-generate-001:generateContent`;
    
    const requestBody = {
      contents: [{
        parts: [{
          text: 'A simple blue fitness dumbbell icon'
        }]
      }],
      generationConfig: {
        aspectRatio: '1:1',
        personGeneration: 'dont_allow'
      }
    };
    
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(requestBody)
    });
    
    const result = await response.json();
    
    if (!response.ok) {
      console.log('‚ùå REST API failed:', result);
      
      if (result.error && result.error.message.includes('not found')) {
        console.log('\nüí° This confirms that Vertex AI Generative AI is not enabled for this project.');
        console.log('üìã To fix this, you need to:');
        console.log('1. Go to: https://console.cloud.google.com/vertex-ai');
        console.log('2. Select your project: force-fitness-1753281211');
        console.log('3. Accept the Terms of Service for Vertex AI Generative AI');
        console.log('4. Enable the Vertex AI API for generative models');
        console.log('\nüéØ Once enabled, the image generation will work!');
      }
      
      return;
    }
    
    console.log('‚úÖ Image generated successfully!');
    
    // Extract and save image
    if (result.candidates && result.candidates[0]) {
      const candidate = result.candidates[0];
      if (candidate.content && candidate.content.parts && candidate.content.parts[0]) {
        const part = candidate.content.parts[0];
        if (part.inlineData && part.inlineData.data) {
          const imageData = Buffer.from(part.inlineData.data, 'base64');
          fs.writeFileSync('test2.png', imageData);
          console.log('üíæ Image saved as test2.png (Generated by Imagen 3 via REST API)');
          return;
        }
      }
    }
    
    console.log('‚ö†Ô∏è Unexpected response format:', result);
    
  } catch (error) {
    console.log('‚ùå Error:', error.message);
  }
}

testRestAPI();