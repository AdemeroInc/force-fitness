const { VertexAI } = require('@google-cloud/vertexai');
const { SecretManagerServiceClient } = require('@google-cloud/secret-manager');
const { createCanvas } = require('canvas');
const fs = require('fs');

async function getSecret(secretName) {
  const secretClient = new SecretManagerServiceClient();
  const projectId = 'force-fitness-1753281211';
  
  const [version] = await secretClient.accessSecretVersion({
    name: `projects/${projectId}/secrets/${secretName}/versions/latest`,
  });
  
  const payload = version.payload?.data?.toString();
  if (!payload) {
    throw new Error(`Failed to retrieve secret: ${secretName}`);
  }
  
  return payload;
}

async function initializeVertexAI() {
  try {
    const project = 'force-fitness-1753281211';
    const location = 'us-central1';
    
    // Initialize with service account credentials from Secret Manager
    const serviceKey = await getSecret('vertex-ai-service-key');
    const credentials = JSON.parse(serviceKey);
    
    const vertexAI = new VertexAI({
      project,
      location,
      credentials,
    });
    
    return vertexAI;
  } catch (error) {
    console.error('Failed to initialize Vertex AI:', error);
    throw error;
  }
}

async function generateImageWithImagen(prompt, options = {}) {
  try {
    const vertex = await initializeVertexAI();
    const model = vertex.getGenerativeModel({
      model: 'imagen-3.0-fast-generate-001',
    });
    
    const request = {
      prompt,
      aspectRatio: options.aspectRatio || '1:1',
      negativePrompt: options.negativePrompt || '',
      personGeneration: options.personGeneration || 'dont_allow',
    };
    
    const result = await model.generateContent(request);
    return result.response;
  } catch (error) {
    console.error('Error generating image:', error);
    throw error;
  }
}

async function createTest2Image() {
  console.log('üöÄ Attempting to generate image with Vertex AI Imagen 3...');
  
  try {
    // First, try to use our actual Vertex AI Imagen 3 integration
    const prompt = 'A sleek fitness app logo featuring a stylized dumbbell with lightning bolt accents, modern gradient background in blue and white, minimalist design, high quality, professional';
    
    const imageResponse = await generateImageWithImagen(prompt, {
      aspectRatio: '1:1',
      negativePrompt: 'blurry, low quality, text, watermark, cluttered',
      personGeneration: 'dont_allow'
    });
    
    console.log('‚úÖ Image generated successfully with Imagen 3!');
    
    // Extract and save the image data
    if (imageResponse.candidates && imageResponse.candidates[0]) {
      const candidate = imageResponse.candidates[0];
      if (candidate.content && candidate.content.parts && candidate.content.parts[0]) {
        const part = candidate.content.parts[0];
        if (part.inlineData && part.inlineData.data) {
          const imageData = Buffer.from(part.inlineData.data, 'base64');
          fs.writeFileSync('test2.png', imageData);
          console.log('üíæ Image saved as test2.png (Generated by Imagen 3)');
          return;
        }
      }
    }
    
    throw new Error('No image data found in Imagen 3 response');
    
  } catch (error) {
    console.log('‚ö†Ô∏è Imagen 3 API error (likely quota limit):', error.message);
    console.log('üé® Creating fallback image with enhanced design...');
    
    // Create an enhanced fallback image using Canvas
    const canvas = createCanvas(512, 512);
    const ctx = canvas.getContext('2d');
    
    // Create radial gradient background
    const gradient = ctx.createRadialGradient(256, 256, 0, 256, 256, 256);
    gradient.addColorStop(0, '#60A5FA'); // Light blue
    gradient.addColorStop(0.6, '#3B82F6'); // Blue
    gradient.addColorStop(1, '#1E40AF'); // Dark blue
    
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, 512, 512);
    
    // Add subtle pattern
    ctx.globalAlpha = 0.1;
    for (let i = 0; i < 512; i += 20) {
      ctx.strokeStyle = '#FFFFFF';
      ctx.lineWidth = 1;
      ctx.beginPath();
      ctx.moveTo(i, 0);
      ctx.lineTo(i, 512);
      ctx.stroke();
      ctx.beginPath();
      ctx.moveTo(0, i);
      ctx.lineTo(512, i);
      ctx.stroke();
    }
    ctx.globalAlpha = 1.0;
    
    // Main title with shadow
    ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';
    ctx.shadowBlur = 10;
    ctx.shadowOffsetX = 3;
    ctx.shadowOffsetY = 3;
    
    ctx.fillStyle = '#FFFFFF';
    ctx.font = 'bold 56px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('FORCE', 256, 180);
    
    ctx.font = 'bold 42px Arial';
    ctx.fillText('FITNESS', 256, 230);
    
    // Reset shadow
    ctx.shadowColor = 'transparent';
    ctx.shadowBlur = 0;
    ctx.shadowOffsetX = 0;
    ctx.shadowOffsetY = 0;
    
    // Enhanced dumbbell with 3D effect
    const centerY = 320;
    const barWidth = 160;
    const barHeight = 12;
    
    // Dumbbell bar with gradient
    const barGradient = ctx.createLinearGradient(176, centerY - 6, 176, centerY + 6);
    barGradient.addColorStop(0, '#E5E7EB');
    barGradient.addColorStop(0.5, '#FFFFFF');
    barGradient.addColorStop(1, '#D1D5DB');
    
    ctx.fillStyle = barGradient;
    ctx.fillRect(176, centerY - 6, barWidth, barHeight);
    
    // Left weight with 3D effect
    const weightGradient = ctx.createLinearGradient(140, centerY - 25, 140, centerY + 25);
    weightGradient.addColorStop(0, '#F3F4F6');
    weightGradient.addColorStop(0.3, '#FFFFFF');
    weightGradient.addColorStop(0.7, '#E5E7EB');
    weightGradient.addColorStop(1, '#D1D5DB');
    
    ctx.fillStyle = weightGradient;
    ctx.fillRect(140, centerY - 25, 50, 50);
    
    // Right weight
    ctx.fillRect(322, centerY - 25, 50, 50);
    
    // Lightning bolt with glow effect
    ctx.shadowColor = '#FEF08A';
    ctx.shadowBlur = 15;
    
    ctx.fillStyle = '#FDE047';
    ctx.beginPath();
    ctx.moveTo(256, 370);
    ctx.lineTo(235, 420);
    ctx.lineTo(248, 420);
    ctx.lineTo(235, 470);
    ctx.lineTo(277, 420);
    ctx.lineTo(264, 420);
    ctx.lineTo(277, 370);
    ctx.closePath();
    ctx.fill();
    
    // Reset effects
    ctx.shadowColor = 'transparent';
    ctx.shadowBlur = 0;
    
    // Add "AI READY" badge
    ctx.fillStyle = 'rgba(16, 185, 129, 0.9)';
    ctx.fillRect(180, 480, 152, 24);
    ctx.fillStyle = '#FFFFFF';
    ctx.font = 'bold 14px Arial';
    ctx.fillText('VERTEX AI READY', 256, 496);
    
    // Save the enhanced image
    const buffer = canvas.toBuffer('image/png');
    fs.writeFileSync('test2.png', buffer);
    
    console.log('‚úÖ Enhanced fallback image created as test2.png');
    console.log('üìù Note: Imagen 3 requires quota increase for actual AI generation');
    console.log('üîó Request quota at: https://console.cloud.google.com/iam-admin/quotas');
  }
}

createTest2Image().catch(console.error);